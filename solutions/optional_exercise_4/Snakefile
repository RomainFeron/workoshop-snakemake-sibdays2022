# Snakemake command:
# snakemake --cores 4


# Load parameters from the config file 'config.yaml'
configfile: 'config.yaml'


# For now, we define samples to process in a list at the top of the Snakefile
# This makes it more convenient to add / remove samples in our workflow.
SAMPLES = ['A', 'B', 'C']


rule all:
    '''
    This 'dummy' rule is a common way to specify a default output with Snakemake.
    Output files are defined as inputs for this rule without any output.
    Because Snakemake executes the first rule in Snakefile by default, jobs to
    generate all inputs from this rules will be triggered.
    Here, we only need to specify the output of the rule 'compute_substition_matrix'
    because all required jobs will automatically be inferred by Snakemake.
    Because 'compute_substition_matrix' is defined after 'all' in the current
    implementation, we cannot use the syntax 'rules.compute_substition_matrix.output'.
    '''
    input:
        'results/substitution_matrix.tsv'


rule bwa_mem:
    '''
    Align any fastq reads file in 'data/sample' to the assembly 'data/genome.fa'.
    The process can be parallelized efficiently by increasing the number of threads.
    '''
    input:
        assembly = config['data']['assembly'],
        reads = 'data/samples/{sample}.fastq'
    output:
        'results/{sample}.bam'
    threads: config['bwa']['threads']
    log:
        'logs/bwa_mem_{sample}.txt'
    shell:
        # Remember to add threads to the actual commands too!
        'bwa mem -t {threads} {input.assembly} {input.reads} 2> {log} | samtools view -b > {output} 2>> {log}'


rule samtools_sort:
    '''
    Sort a BAM file generated by the rule bwa_mem.
    We use the recommended syntax for dependencies between rules to specify the
    input: rules.<rule_name>.output. This syntax is preferred over 'results/{sample}.bam'
    because it will be automatically updated if we decide to change the output path of
    our first rule.
    '''
    input:
        rules.bwa_mem.output
    output:
        'results/{sample}.sorted.bam'
    log:
        'logs/samtools_sort_{sample}.txt'
    shell:
        'samtools sort -O bam {input} > {output} 2> {log}'


rule call_variants:
    '''
    Call variants from alignment files for all samples defined in the list SAMPLES.
    Sorted BAMs for all samples are collected with expand().
    The value of the substitution rate parameter -P in bcftools call is defined in
    params.
    '''
    input:
        alignment_files = expand(rules.samtools_sort.output, sample=SAMPLES),
        assembly = 'data/genome.fa'
    output:
        'results/variants.vcf'
    params:
        substitution_rate = config['bcftools']['mutation_rate']
    log:
        'logs/call_variants.txt'
    shell:
        'bcftools mpileup -f {input.assembly} {input.alignment_files} 2> {log}| '
        'bcftools call -P {params.substitution_rate} -mv - > {output} 2>> {log}'


rule compute_substitution_matrix:
    '''
    Compute a matrix of substitution frequencies from the VCF file generated by call_variants.
    The matrix is computed using a Python script that we call with Snakemake.
    '''
    input:
        rules.call_variants.output
    output:
        'results/substitution_matrix.tsv'
    script:
        'compute_substitution_matrix.py'
